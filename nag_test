#! /usr/bin/python

import nag
import expect
import unittest
import random


INITIAL_KEYS = list('abcdefghijklmnopqrstuvwxyz') + map(str, range(1, 100))
BAD_KEYS = list('*/:.A0') + ['aa', '01']

class KeySequenceTest(expect.TestCase):

  def setUp(self):
    self.seq = nag.KeySequence()

  def testIsValid(self):
    for key in BAD_KEYS:
      self.Expect(key).Not().ToSatisfy(self.seq.IsValid)
    for key in INITIAL_KEYS:
      self.Expect(key).ToSatisfy(self.seq.IsValid)

  def testFirstAndNext(self):
    self.Expect(self.seq.Next('a')).ToEqual('b')
    self.Expect(self.seq.Next('z')).ToEqual('1')
    self.Expect(self.seq.Next('1')).ToEqual('2')

    actual = self.seq.First()
    for expected in INITIAL_KEYS:
      self.Expect(actual).ToEqual(expected)
      actual = self.seq.Next(actual)

  def testSort(self):
    r = random.WichmannHill(0)
    for i in range(100):
      key_list = list(INITIAL_KEYS)
      r.shuffle(key_list)
      self.seq.Sort(key_list)
      self.Expect(key_list).ToEqual(INITIAL_KEYS)

if __name__ == '__main__': unittest.main()
